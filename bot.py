import os
import sqlite3
import logging
import random
import time
from datetime import datetime, timedelta
from flask import Flask
from threading import Thread
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CommandHandler, CallbackQueryHandler, CallbackContext, MessageHandler, Filters

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = Flask(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN', '8475967867:AAERsgs07LHdhHDadjO2t7HJk4ACSG94kIA')
ADMIN_USERNAME = "@venomvwwv"
ADMIN_PASSWORD = "1#4#8#8"

# –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã —Å –Ω–∞—á–∞–ª—å–Ω—ã–º–∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è–º–∏ –ø–æ 100 –º–∏–ª–ª–∏–æ–Ω–æ–≤
CRYPTOCURRENCIES = {
    "NEO": {"name": "NeoCoin", "rate": 50.0, "volatility": 0.08, "total_invested": 100000000},
    "QUAN": {"name": "QuantumToken", "rate": 25.0, "volatility": 0.12, "total_invested": 100000000},
    "ZEN": {"name": "ZenithCoin", "rate": 75.0, "volatility": 0.06, "total_invested": 100000000},
    "VOY": {"name": "VoyagerToken", "rate": 15.0, "volatility": 0.15, "total_invested": 100000000},
    "AXI": {"name": "AxiomCoin", "rate": 40.0, "volatility": 0.09, "total_invested": 100000000}
}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
def init_db():
    conn = sqlite3.connect('bank.db', check_same_thread=False)
    c = conn.cursor()
    
    c.execute('''CREATE TABLE IF NOT EXISTS users
                 (user_id INTEGER PRIMARY KEY, username TEXT, balance REAL DEFAULT 0,
                  deposit_balance REAL DEFAULT 0, referral_code TEXT, is_subscribed INTEGER DEFAULT 1,
                  registration_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP)''')
    
    c.execute('''CREATE TABLE IF NOT EXISTS cryptocurrencies
                 (symbol TEXT PRIMARY KEY, name TEXT, current_rate REAL, 
                  previous_rate REAL, volatility REAL, total_invested REAL DEFAULT 0)''')
    
    c.execute('''CREATE TABLE IF NOT EXISTS investments
                 (id INTEGER PRIMARY KEY AUTOINCREMENT, user_id INTEGER, crypto_symbol TEXT,
                  amount REAL, buy_rate REAL, investment_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP)''')
    
    c.execute('''CREATE TABLE IF NOT EXISTS deposits
                 (id INTEGER PRIMARY KEY AUTOINCREMENT, user_id INTEGER, amount REAL,
                  start_date TIMESTAMP, end_date TIMESTAMP, status TEXT DEFAULT 'active')''')
    
    c.execute('''CREATE TABLE IF NOT EXISTS bank
                 (id INTEGER PRIMARY KEY DEFAULT 1, total_balance REAL DEFAULT 0,
                  reserve_balance REAL DEFAULT 0)''')
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
    for symbol, data in CRYPTOCURRENCIES.items():
        c.execute('''INSERT OR IGNORE INTO cryptocurrencies 
                     (symbol, name, current_rate, previous_rate, volatility, total_invested) 
                     VALUES (?, ?, ?, ?, ?, ?)''',
                 (symbol, data["name"], data["rate"], data["rate"], data["volatility"], data["total_invested"]))
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–ª–∞–Ω—Å–∞ –±–∞–Ω–∫–∞ (0)
    c.execute("INSERT OR IGNORE INTO bank (id, total_balance, reserve_balance) VALUES (1, 0, 0)")
    
    conn.commit()
    conn.close()
    logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î
def get_user_data(user_id):
    conn = sqlite3.connect('bank.db', check_same_thread=False)
    c = conn.cursor()
    c.execute("SELECT * FROM users WHERE user_id = ?", (user_id,))
    user = c.fetchone()
    conn.close()
    return user

def create_user(user_id, username):
    conn = sqlite3.connect('bank.db', check_same_thread=False)
    c = conn.cursor()
    referral_code = f"REF{user_id}{random.randint(1000, 9999)}"
    
    c.execute('''INSERT OR IGNORE INTO users 
                 (user_id, username, referral_code, balance) 
                 VALUES (?, ?, ?, ?)''',
             (user_id, username, referral_code, 0))
    
    conn.commit()
    conn.close()
    return referral_code

def get_bank_balance():
    conn = sqlite3.connect('bank.db', check_same_thread=False)
    c = conn.cursor()
    c.execute("SELECT total_balance, reserve_balance FROM bank WHERE id = 1")
    balance = c.fetchone()
    conn.close()
    return balance

def update_bank_balance(amount):
    conn = sqlite3.connect('bank.db', check_same_thread=False)
    c = conn.cursor()
    c.execute("UPDATE bank SET total_balance = total_balance + ? WHERE id = 1", (amount,))
    conn.commit()
    conn.close()

def get_crypto_data(symbol):
    conn = sqlite3.connect('bank.db', check_same_thread=False)
    c = conn.cursor()
    c.execute("SELECT * FROM cryptocurrencies WHERE symbol = ?", (symbol,))
    crypto = c.fetchone()
    conn.close()
    return crypto

def get_all_cryptos():
    conn = sqlite3.connect('bank.db', check_same_thread=False)
    c = conn.cursor()
    c.execute("SELECT * FROM cryptocurrencies")
    cryptos = c.fetchall()
    conn.close()
    return cryptos

def update_crypto_rates():
    conn = sqlite3.connect('bank.db', check_same_thread=False)
    c = conn.cursor()
    
    cryptos = get_all_cryptos()
    bank_balance = get_bank_balance()[0]
    
    for crypto in cryptos:
        symbol, name, current_rate, previous_rate, volatility, total_invested = crypto
        c.execute("UPDATE cryptocurrencies SET previous_rate = ? WHERE symbol = ?", 
                 (current_rate, symbol))
    
    for crypto in cryptos:
        symbol, name, current_rate, previous_rate, volatility, total_invested = crypto
        
        base_change = random.uniform(-volatility, volatility)
        demand_factor = min(total_invested / 100000000, 0.3)
        demand_change = demand_factor * random.uniform(0.01, 0.05)
        bank_factor = max(0, (bank_balance - 300000) / 1000000)
        stability_bonus = bank_factor * 0.02
        
        total_change = base_change + demand_change - stability_bonus
        total_change = max(min(total_change, volatility * 1.5), -volatility * 1.5)
        
        new_rate = current_rate * (1 + total_change)
        
        if new_rate < current_rate * 0.3:
            new_rate = current_rate * 0.7

        c.execute("UPDATE cryptocurrencies SET current_rate = ? WHERE symbol = ?", 
                 (round(new_rate, 2), symbol))
    
    conn.commit()
    conn.close()
    logger.info("üìä –ö—É—Ä—Å—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –æ–±–Ω–æ–≤–ª–µ–Ω—ã")

def create_investment(user_id, crypto_symbol, amount):
    conn = sqlite3.connect('bank.db', check_same_thread=False)
    c = conn.cursor()
    
    c.execute("SELECT current_rate FROM cryptocurrencies WHERE symbol = ?", (crypto_symbol,))
    current_rate = c.fetchone()[0]
    
    c.execute("SELECT balance FROM users WHERE user_id = ?", (user_id,))
    user_balance = c.fetchone()[0]
    
    if user_balance >= amount:
        c.execute('''INSERT INTO investments 
                     (user_id, crypto_symbol, amount, buy_rate) 
                     VALUES (?, ?, ?, ?)''',
                 (user_id, crypto_symbol, amount, current_rate))
        
        c.execute("UPDATE cryptocurrencies SET total_invested = total_invested + ? WHERE symbol = ?",
                 (amount, crypto_symbol))
        
        c.execute("UPDATE users SET balance = balance - ? WHERE user_id = ?", 
                 (amount, user_id))
        
        conn.commit()
        conn.close()
        return True, current_rate
    else:
        conn.close()
        return False, 0

def get_user_investments(user_id):
    conn = sqlite3.connect('bank.db', check_same_thread=False)
    c = conn.cursor()
    c.execute('''SELECT i.*, c.current_rate, c.name 
                 FROM investments i 
                 JOIN cryptocurrencies c ON i.crypto_symbol = c.symbol 
                 WHERE i.user_id = ?''', (user_id,))
    investments = c.fetchall()
    conn.close()
    return investments

def create_deposit(user_id, amount, days):
    conn = sqlite3.connect('bank.db', check_same_thread=False)
    c = conn.cursor()
    
    c.execute("SELECT balance FROM users WHERE user_id = ?", (user_id,))
    user_balance = c.fetchone()[0]
    
    if user_balance >= amount and days <= 10:
        start_date = datetime.now()
        end_date = start_date + timedelta(days=days)
        
        c.execute('''INSERT INTO deposits 
                     (user_id, amount, start_date, end_date) 
                     VALUES (?, ?, ?, ?)''',
                 (user_id, amount, start_date, end_date))
        
        c.execute("UPDATE users SET balance = balance - ?, deposit_balance = deposit_balance + ? WHERE user_id = ?", 
                 (amount, amount, user_id))
        
        conn.commit()
        conn.close()
        return True
    else:
        conn.close()
        return False

def get_user_deposits(user_id):
    conn = sqlite3.connect('bank.db', check_same_thread=False)
    c = conn.cursor()
    c.execute("SELECT * FROM deposits WHERE user_id = ? AND status = 'active'", (user_id,))
    deposits = c.fetchall()
    conn.close()
    return deposits

def process_deposits():
    conn = sqlite3.connect('bank.db', check_same_thread=False)
    c = conn.cursor()
    
    c.execute("SELECT * FROM deposits WHERE status = 'active'")
    deposits = c.fetchall()
    
    for deposit in deposits:
        deposit_id, user_id, amount, start_date, end_date, status = deposit
        end_date = datetime.fromisoformat(end_date) if isinstance(end_date, str) else end_date
        
        if datetime.now() >= end_date:
            start_date = datetime.fromisoformat(start_date) if isinstance(start_date, str) else start_date
            days = (end_date - start_date).days
            total_return = amount * (1 + 0.05 * days)
            
            c.execute("UPDATE users SET balance = balance + ?, deposit_balance = deposit_balance - ? WHERE user_id = ?", 
                     (total_return, amount, user_id))
            c.execute("UPDATE deposits SET status = 'completed' WHERE id = ?", (deposit_id,))
    
    conn.commit()
    conn.close()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}

# –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
def start(update: Update, context: CallbackContext) -> None:
    user_id = update.effective_user.id
    username = update.effective_user.username or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    
    referral_code = create_user(user_id, username)

    welcome_text = f"""
üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>CryptoBank</b>, {username}!

üí∞ <b>–í–∞—à –±–∞–ª–∞–Ω—Å:</b> 0 –º–æ–Ω–µ—Ç
üîó <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥:</b> <code>{referral_code}</code>

üìä <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>
‚Ä¢ üí∞ –ë–∞–ª–∞–Ω—Å - /balance
‚Ä¢ üìà –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ - /invest  
‚Ä¢ üè¶ –î–µ–ø–æ–∑–∏—Ç—ã - /deposit
‚Ä¢ üìä –ö—É—Ä—Å—ã - /rates
‚Ä¢ üíº –ú–æ–∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ - /myinvest
‚Ä¢ üè¶ –ú–æ–∏ –¥–µ–ø–æ–∑–∏—Ç—ã - /mydeposits

üí° <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞:</b> –ù–∞–ø–∏—à–∏—Ç–µ {ADMIN_USERNAME}
    """

    keyboard = [
        [InlineKeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å", callback_data='balance'),
         InlineKeyboardButton("üìä –ö—É—Ä—Å—ã", callback_data='rates')],
        [InlineKeyboardButton("üíº –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏", callback_data='invest'),
         InlineKeyboardButton("üè¶ –î–µ–ø–æ–∑–∏—Ç—ã", callback_data='deposit')],
        [InlineKeyboardButton("üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data='profile')]
    ]

    update.message.reply_text(welcome_text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='HTML')

def balance(update: Update, context: CallbackContext) -> None:
    user_id = update.effective_user.id
    user_data = get_user_data(user_id)
    
    if user_data:
        balance = user_data[2] or 0
        deposit_balance = user_data[3] or 0

        response = f"""
üí∞ <b>–í–∞—à —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å:</b>

üíµ <b>–î–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å:</b> {balance:,.2f} –º–æ–Ω–µ—Ç
üè¶ <b>–í –¥–µ–ø–æ–∑–∏—Ç–∞—Ö:</b> {deposit_balance:,.2f} –º–æ–Ω–µ—Ç
üíé <b>–û–±—â–∏–π –∫–∞–ø–∏—Ç–∞–ª:</b> {balance + deposit_balance:,.2f} –º–æ–Ω–µ—Ç

üí≥ <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞:</b> –ù–∞–ø–∏—à–∏—Ç–µ {ADMIN_USERNAME}
        """
        update.message.reply_text(response, parse_mode='HTML')

def invest(update: Update, context: CallbackContext) -> None:
    cryptos = get_all_cryptos()
    
    buttons = []
    for crypto in cryptos:
        symbol, name, current_rate, previous_rate, volatility, total_invested = crypto
        buttons.append([InlineKeyboardButton(f"üìà {name} (${current_rate:.2f})", callback_data=f'invest_{symbol}')])

    buttons.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='main_menu')])
    
    update.message.reply_text(
        "üíº <b>–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:</b>",
        reply_markup=InlineKeyboardMarkup(buttons),
        parse_mode='HTML'
    )

def deposit(update: Update, context: CallbackContext) -> None:
    warning_text = """
üè¶ <b>–ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ –¥–µ–ø–æ–∑–∏—Ç—ã</b>

üìà <b>–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å:</b> 5% –≤ –¥–µ–Ω—å
‚è∞ <b>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Å—Ä–æ–∫:</b> 10 –¥–Ω–µ–π
üí∞ <b>–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞:</b> 100 –º–æ–Ω–µ—Ç

‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ:</b> –î–µ–ø–æ–∑–∏—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –º–∞–∫—Å–∏–º—É–º 10 –¥–Ω–µ–π!
–ü–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å—Ä–æ–∫–∞ –ø—Ä–æ—Ü–µ–Ω—Ç—ã –Ω–µ –Ω–∞—á–∏—Å–ª—è—é—Ç—Å—è.

–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –¥–µ–ø–æ–∑–∏—Ç–∞:
    """

    keyboard = [
        [InlineKeyboardButton("1 –¥–µ–Ω—å (+5%)", callback_data='deposit_1'),
         InlineKeyboardButton("3 –¥–Ω—è (+15%)", callback_data='deposit_3')],
        [InlineKeyboardButton("7 –¥–Ω–µ–π (+35%)", callback_data='deposit_7'),
         InlineKeyboardButton("10 –¥–Ω–µ–π (+50%)", callback_data='deposit_10')],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='main_menu')]
    ]

    update.message.reply_text(warning_text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='HTML')

def rates(update: Update, context: CallbackContext) -> None:
    cryptos = get_all_cryptos()
    bank_balance = get_bank_balance()[0]

    rates_text = "üìä <b>–¢–µ–∫—É—â–∏–µ –∫—É—Ä—Å—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç:</b>\n\n"

    for crypto in cryptos:
        symbol, name, current, previous, volatility, invested = crypto
        change = ((current - previous) / previous) * 100
        arrow = "üìà" if change > 0 else "üìâ" if change < 0 else "‚û°Ô∏è"

        rates_text += f"<b>{name} ({symbol})</b>\n"
        rates_text += f"üíµ <b>–ö—É—Ä—Å:</b> ${current:.2f} {arrow} {change:+.2f}%\n"
        rates_text += f"üí∞ <b>–û–±—ä–µ–º –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π:</b> {invested:,.0f} –º–æ–Ω–µ—Ç\n\n"

    rates_text += f"üè¶ <b>–ë–∞–ª–∞–Ω—Å –±–∞–Ω–∫–∞:</b> {bank_balance:,.0f} –º–æ–Ω–µ—Ç\n"
    rates_text += "üîÑ –ö—É—Ä—Å—ã –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç"

    keyboard = [[
        InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data='rates'),
        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='main_menu')
    ]]

    update.message.reply_text(rates_text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='HTML')

def myinvest(update: Update, context: CallbackContext) -> None:
    user_id = update.effective_user.id
    investments = get_user_investments(user_id)

    if not investments:
        update.message.reply_text("üíº <b>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π</b>\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /invest —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å!", parse_mode='HTML')
        return

    investments_text = "üíº <b>–í–∞—à–∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏:</b>\n\n"
    total_value = 0

    for inv in investments:
        inv_id, user_id, symbol, amount, buy_rate, date, current_rate, name = inv
        current_value = amount * (current_rate / buy_rate)
        profit = current_value - amount
        profit_percent = (profit / amount) * 100

        investments_text += f"<b>{name} ({symbol})</b>\n"
        investments_text += f"üí∞ <b>–ò–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ:</b> {amount:,.0f} –º–æ–Ω–µ—Ç\n"
        investments_text += f"üìà <b>–¢–µ–∫—É—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:</b> {current_value:,.0f} –º–æ–Ω–µ—Ç\n"
        investments_text += f"üíµ <b>–ü—Ä–∏–±—ã–ª—å:</b> {profit:+.0f} –º–æ–Ω–µ—Ç ({profit_percent:+.1f}%)\n"
        investments_text += f"üìÖ <b>–î–∞—Ç–∞:</b> {date[:10]}\n\n"

        total_value += current_value

    investments_text += f"üíé <b>–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—è:</b> {total_value:,.0f} –º–æ–Ω–µ—Ç"

    update.message.reply_text(investments_text, parse_mode='HTML')

def mydeposits(update: Update, context: CallbackContext) -> None:
    user_id = update.effective_user.id
    deposits = get_user_deposits(user_id)

    if not deposits:
        update.message.reply_text("üè¶ <b>–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–µ–ø–æ–∑–∏—Ç–æ–≤</b>\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /deposit —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –¥–µ–ø–æ–∑–∏—Ç!", parse_mode='HTML')
        return

    deposits_text = "üè¶ <b>–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –¥–µ–ø–æ–∑–∏—Ç—ã:</b>\n\n"

    for dep in deposits:
        dep_id, user_id, amount, start_date, end_date, status = dep
        end_date_obj = datetime.fromisoformat(end_date) if isinstance(end_date, str) else end_date
        start_date_obj = datetime.fromisoformat(start_date) if isinstance(start_date, str) else start_date
        days_passed = (datetime.now() - start_date_obj).days
        total_days = (end_date_obj - start_date_obj).days
        expected_return = amount * (1 + 0.05 * total_days)

        deposits_text += f"<b>–î–µ–ø–æ–∑–∏—Ç #{dep_id}</b>\n"
        deposits_text += f"üí∞ <b>–°—É–º–º–∞:</b> {amount:,.0f} –º–æ–Ω–µ—Ç\n"
        deposits_text += f"üìÖ <b>–ù–∞—á–∞–ª–æ:</b> {start_date_obj.strftime('%d.%m.%Y')}\n"
        deposits_text += f"‚è∞ <b>–û–∫–æ–Ω—á–∞–Ω–∏–µ:</b> {end_date_obj.strftime('%d.%m.%Y')}\n"
        deposits_text += f"‚è≥ <b>–ü—Ä–æ—à–ª–æ –¥–Ω–µ–π:</b> {days_passed}/{total_days}\n"
        deposits_text += f"üíµ <b>–û–∂–∏–¥–∞–µ–º—ã–π –≤–æ–∑–≤—Ä–∞—Ç:</b> {expected_return:,.0f} –º–æ–Ω–µ—Ç\n\n"

    update.message.reply_text(deposits_text, parse_mode='HTML')

def admin(update: Update, context: CallbackContext) -> None:
    user_id = update.effective_user.id
    username = update.effective_user.username or ""
    text = update.message.text

    if text == f"/admin {ADMIN_PASSWORD}":
        admin_text = f"""
üîß <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>

üë§ <b>–ê–¥–º–∏–Ω:</b> {username}

<b>–ö–æ–º–∞–Ω–¥—ã:</b>
‚Ä¢ /add_balance [—Å—É–º–º–∞] - –ü–æ–ø–æ–ª–Ω–∏—Ç—å –∫–∞–∑–Ω—É
‚Ä¢ /bank_stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–Ω–∫–∞

<b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>
–ù–∞–ø–∏—à–∏—Ç–µ: <code>–ø–æ–ø–æ–ª–Ω–∏—Ç—å @username 1000</code>
        """
        update.message.reply_text(admin_text, parse_mode='HTML')
    else:
        update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∞")

def add_balance(update: Update, context: CallbackContext) -> None:
    user_id = update.effective_user.id
    username = update.effective_user.username or ""
    
    if ADMIN_USERNAME not in username:
        update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!")
        return

    if not context.args:
        update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_balance [—Å—É–º–º–∞]")
        return

    try:
        amount = float(context.args[0])
        update_bank_balance(amount)
        update.message.reply_text(f"‚úÖ –í –∫–∞–∑–Ω—É –±–∞–Ω–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–æ {amount:,.0f} –º–æ–Ω–µ—Ç!")
    except ValueError:
        update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞!")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
def button_handler(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    data = query.data
    user_id = query.from_user.id

    query.answer()

    if data == 'main_menu':
        welcome_text = """
üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>CryptoBank</b>!

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
        """
        keyboard = [
            [InlineKeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å", callback_data='balance'),
             InlineKeyboardButton("üìä –ö—É—Ä—Å—ã", callback_data='rates')],
            [InlineKeyboardButton("üíº –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏", callback_data='invest'),
             InlineKeyboardButton("üè¶ –î–µ–ø–æ–∑–∏—Ç—ã", callback_data='deposit')],
            [InlineKeyboardButton("üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data='profile')]
        ]
        query.edit_message_text(welcome_text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='HTML')
    
    elif data == 'balance':
        user_data = get_user_data(user_id)
        if user_data:
            response = f"""
üí∞ <b>–í–∞—à —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å:</b>

üíµ <b>–î–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å:</b> {user_data[2]:,.2f} –º–æ–Ω–µ—Ç
üè¶ <b>–í –¥–µ–ø–æ–∑–∏—Ç–∞—Ö:</b> {user_data[3]:,.2f} –º–æ–Ω–µ—Ç
üíé <b>–û–±—â–∏–π –∫–∞–ø–∏—Ç–∞–ª:</b> {user_data[2] + user_data[3]:,.2f} –º–æ–Ω–µ—Ç

üí≥ <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞:</b> –ù–∞–ø–∏—à–∏—Ç–µ {ADMIN_USERNAME}
            """
            query.edit_message_text(response, parse_mode='HTML')
    
    elif data == 'rates':
        cryptos = get_all_cryptos()
        bank_balance = get_bank_balance()[0]

        rates_text = "üìä <b>–¢–µ–∫—É—â–∏–µ –∫—É—Ä—Å—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç:</b>\n\n"

        for crypto in cryptos:
            symbol, name, current, previous, volatility, invested = crypto
            change = ((current - previous) / previous) * 100
            arrow = "üìà" if change > 0 else "üìâ" if change < 0 else "‚û°Ô∏è"

            rates_text += f"<b>{name} ({symbol})</b>\n"
            rates_text += f"üíµ <b>–ö—É—Ä—Å:</b> ${current:.2f} {arrow} {change:+.2f}%\n"
            rates_text += f"üí∞ <b>–û–±—ä–µ–º –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π:</b> {invested:,.0f} –º–æ–Ω–µ—Ç\n\n"

        rates_text += f"üè¶ <b>–ë–∞–ª–∞–Ω—Å –±–∞–Ω–∫–∞:</b> {bank_balance:,.0f} –º–æ–Ω–µ—Ç\n"
        rates_text += "üîÑ –ö—É—Ä—Å—ã –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç"

        keyboard = [[
            InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data='rates'),
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='main_menu')
        ]]
        query.edit_message_text(rates_text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='HTML')
    
    elif data == 'invest':
        cryptos = get_all_cryptos()
        buttons = []
        for crypto in cryptos:
            symbol, name, current_rate, previous_rate, volatility, total_invested = crypto
            buttons.append([InlineKeyboardButton(f"üìà {name} (${current_rate:.2f})", callback_data=f'invest_{symbol}')])
        buttons.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='main_menu')])
        query.edit_message_text(
            'üíº <b>–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:</b>',
            reply_markup=InlineKeyboardMarkup(buttons),
            parse_mode='HTML'
        )
    
    elif data == 'deposit':
        warning_text = """
üè¶ <b>–ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ –¥–µ–ø–æ–∑–∏—Ç—ã</b>

üìà <b>–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å:</b> 5% –≤ –¥–µ–Ω—å
‚è∞ <b>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Å—Ä–æ–∫:</b> 10 –¥–Ω–µ–π
üí∞ <b>–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞:</b> 100 –º–æ–Ω–µ—Ç

‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ:</b> –î–µ–ø–æ–∑–∏—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –º–∞–∫—Å–∏–º—É–º 10 –¥–Ω–µ–π!
–ü–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å—Ä–æ–∫–∞ –ø—Ä–æ—Ü–µ–Ω—Ç—ã –Ω–µ –Ω–∞—á–∏—Å–ª—è—é—Ç—Å—è.

–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –¥–µ–ø–æ–∑–∏—Ç–∞:
        """
        keyboard = [
            [InlineKeyboardButton("1 –¥–µ–Ω—å (+5%)", callback_data='deposit_1'),
             InlineKeyboardButton("3 –¥–Ω—è (+15%)", callback_data='deposit_3')],
            [InlineKeyboardButton("7 –¥–Ω–µ–π (+35%)", callback_data='deposit_7'),
             InlineKeyboardButton("10 –¥–Ω–µ–π (+50%)", callback_data='deposit_10')],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='main_menu')]
        ]
        query.edit_message_text(warning_text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='HTML')
    
    elif data == 'profile':
        user_data = get_user_data(user_id)
        if user_data:
            profile_text = f"""
üë§ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>

üÜî <b>ID:</b> {user_id}
üë§ <b>Username:</b> @{user_data[1]}
üí∞ <b>–ë–∞–ª–∞–Ω—Å:</b> {user_data[2]:,.0f} –º–æ–Ω–µ—Ç
üè¶ <b>–í –¥–µ–ø–æ–∑–∏—Ç–∞—Ö:</b> {user_data[3]:,.0f} –º–æ–Ω–µ—Ç
üîó <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥:</b> <code>{user_data[4]}</code>
üìÖ <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:</b> {user_data[6][:10]}
            """
            query.edit_message_text(profile_text, parse_mode='HTML')
    
    elif data.startswith('invest_'):
        crypto_symbol = data.split('_')[1]
        crypto_data = get_crypto_data(crypto_symbol)
        if crypto_data:
            response = f"""
üíº <b>–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏—è –≤ {crypto_data[1]} ({crypto_symbol})</b>

üíµ <b>–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å:</b> ${crypto_data[2]:.2f}
üìà <b>–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å:</b> {crypto_data[4] * 100:.1f}%
üí∞ <b>–û–±—â–∏–π –æ–±—ä–µ–º –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π:</b> {crypto_data[5]:,.0f} –º–æ–Ωet

–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ (–º–∏–Ω. 100 –º–æ–Ω–µ—Ç):
            """
            user_states[user_id] = {'type': 'waiting_investment_amount', 'crypto_symbol': crypto_symbol}
            query.edit_message_text(response, parse_mode='HTML')
    
    elif data.startswith('deposit_'):
        days = int(data.split('_')[1])
        response = f"""
üè¶ <b>–û—Ç–∫—Ä—ã—Ç–∏–µ –¥–µ–ø–æ–∑–∏—Ç–∞ –Ω–∞ {days} –¥–Ω–µ–π</b>

üìà <b>–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å:</b> {5 * days}%
üí∞ <b>–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞:</b> 100 –º–æ–Ω–µ—Ç
‚è∞ <b>–°—Ä–æ–∫:</b> {days} –¥–Ω–µ–π

‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ:</b> –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Å—Ä–æ–∫ –¥–µ–ø–æ–∑–∏—Ç–∞ - 10 –¥–Ω–µ–π!

–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –¥–µ–ø–æ–∑–∏—Ç–∞:
        """
        user_states[user_id] = {'type': 'waiting_deposit_amount', 'days': days}
        query.edit_message_text(response, parse_mode='HTML')

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (—Å—É–º–º—ã)
def handle_message(update: Update, context: CallbackContext) -> None:
    user_id = update.effective_user.id
    text = update.message.text

    if user_id in user_states and not text.startswith('/'):
        state = user_states[user_id]
        amount = float(text) if text.isdigit() else 0
        
        if amount < 100:
            update.message.reply_text("‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ - 100 –º–æ–Ω–µ—Ç!")
            return
            
        if state['type'] == 'waiting_investment_amount':
            success, buy_rate = create_investment(user_id, state['crypto_symbol'], amount)
            if success:
                crypto_data = get_crypto_data(state['crypto_symbol'])
                response = f"""
‚úÖ <b>–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞!</b>

üíº <b>–ê–∫—Ç–∏–≤:</b> {crypto_data[1]} ({state['crypto_symbol']})
üí∞ <b>–°—É–º–º–∞:</b> {amount:,.0f} –º–æ–Ω–µ—Ç
üíµ <b>–ö—É—Ä—Å –ø–æ–∫—É–ø–∫–∏:</b> ${buy_rate:.2f}
üìÖ <b>–î–∞—Ç–∞:</b> {datetime.now().strftime('%d.%m.%Y %H:%M')}

üìä –°–ª–µ–¥–∏—Ç–µ –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º –∫—É—Ä—Å–∞ –≤ —Ä–∞–∑–¥–µ–ª–µ "–ú–æ–∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏"
                """
                del user_states[user_id]
            else:
                user_data = get_user_data(user_id)
                response = f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤! –í–∞—à –±–∞–ª–∞–Ω—Å: {user_data[2] if user_data else 0:,.0f} –º–æ–Ω–µ—Ç"
            
            update.message.reply_text(response, parse_mode='HTML')
            
        elif state['type'] == 'waiting_deposit_amount':
            success = create_deposit(user_id, amount, state['days'])
            if success:
                total_return = amount * (1 + 0.05 * state['days'])
                response = f"""
‚úÖ <b>–î–µ–ø–æ–∑–∏—Ç –æ—Ç–∫—Ä—ã—Ç!</b>

üí∞ <b>–°—É–º–º–∞:</b> {amount:,.0f} –º–æ–Ω–µ—Ç
‚è∞ <b>–°—Ä–æ–∫:</b> {state['days']} –¥–Ω–µ–π
üìà <b>–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å:</b> {5 * state['days']}%
üíµ <b>–û–∂–∏–¥–∞–µ–º—ã–π –≤–æ–∑–≤—Ä–∞—Ç:</b> {total_return:,.0f} –º–æ–Ω–µ—Ç
üìÖ <b>–û–∫–æ–Ω—á–∞–Ω–∏–µ:</b> {(datetime.now() + timedelta(days=state['days'])).strftime('%d.%m.%Y')}

‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ:</b> –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Å—Ä–æ–∫ –¥–µ–ø–æ–∑–∏—Ç–∞ - 10 –¥–Ω–µ–π!
                """
                del user_states[user_id]
            else:
                user_data = get_user_data(user_id)
                response = f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤! –í–∞—à –±–∞–ª–∞–Ω—Å: {user_data[2] if user_data else 0:,.0f} –º–æ–Ω–µ—Ç"
            
            update.message.reply_text(response, parse_mode='HTML')

# –í–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Railway
@app.route('/')
def home():
    return """
    <html>
        <head>
            <title>CryptoBank Bot</title>
            <style>
                body { font-family: Arial, sans-serif; margin: 40px; background: #f0f2f5; }
                .container { max-width: 800px; margin: 0 auto; background: white; padding: 30px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
                .status { color: green; font-weight: bold; font-size: 18px; }
            </style>
        </head>
        <body>
            <div class="container">
                <h1>ü§ñ CryptoBank Bot</h1>
                <p class="status">‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ Telegram!</p>
                <p>–ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω –∏ –≥–æ—Ç–æ–≤ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã.</p>
                <p>–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ Telegram –∏ –Ω–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É –∫–æ–º–∞–Ω–¥—É /start</p>
            </div>
        </body>
    </html>
    """

# –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤
def background_tasks():
    while True:
        try:
            update_crypto_rates()
            process_deposits()
            time.sleep(300)  # 5 –º–∏–Ω—É—Ç
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ: {e}")
            time.sleep(60)

def run_bot():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    init_db()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ updater
    updater = Updater(BOT_TOKEN)
    dispatcher = updater.dispatcher

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
    dispatcher.add_handler(CommandHandler("start", start))
    dispatcher.add_handler(CommandHandler("balance", balance))
    dispatcher.add_handler(CommandHandler("invest", invest))
    dispatcher.add_handler(CommandHandler("deposit", deposit))
    dispatcher.add_handler(CommandHandler("rates", rates))
    dispatcher.add_handler(CommandHandler("myinvest", myinvest))
    dispatcher.add_handler(CommandHandler("mydeposits", mydeposits))
    dispatcher.add_handler(CommandHandler("admin", admin))
    dispatcher.add_handler(CommandHandler("add_balance", add_balance))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    dispatcher.add_handler(CallbackQueryHandler(button_handler))
    dispatcher.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_message))

    # –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
    bg_thread = Thread(target=background_tasks)
    bg_thread.daemon = True
    bg_thread.start()

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    updater.start_polling()
    logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    
    # –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è Railway
    port = int(os.environ.get('PORT', 3000))
    web_thread = Thread(target=lambda: app.run(host='0.0.0.0', port=port, debug=False, use_reloader=False))
    web_thread.daemon = True
    web_thread.start()

if __name__ == '__main__':
    run_bot()
